{
  "hash": "d73a93c5ec4bbca13a7152a1b6b90a98",
  "result": {
    "markdown": "---\ntitle: \"Data visualization with 'ggplot2' in R\"\nformat: html\nimage: tuto3.png\ndate: 07-31-23\n---\n\n\n#### *Prepared by Claire Lepault and Marie Sevestre* <br>\n\n`ggplot2` is a data visualization package widely used for creating sophisticated plots. It was developped by Hadley Wickham and is based on the Grammar of Graphics (*gg*), which is a systematic framework for understanding and constructing data visualizations. \n\n## To get started ! \n\n### Ensure tidyverse is installed\n\nThe `ggplot2` package is part of the [`tidyverse`](https://ggplot2.tidyverse.org/) (Hadleyverse).\n\nFirst, ensure **tidyverse** is installed : `install.packages('tidyverse')` <br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\") #Load the library \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n### The storms database\n\nAs in the `dplyr` tutorial, we will work with the **storms** dataset to present the package. Thanks to the `tidyverse` library, we have already loaded the `dplyr` package. **storms** is the NOAA Atlantic hurricane database best track data. \nThe data includes the positions and attributes of storms from 1975-2021. Storms from 1979 onward are measured every six hours during the lifetime of the storms. \n\nIf you want to learn more about storms : \n\n::: {.cell}\n\n```{.r .cell-code}\n?storms\n```\n:::\n\nFor example, we will be looking at the average, minimum and maximum wind speed of storms per decade. To do this, we create the `storms_decade` dataset :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorms_decade <- storms %>% \n                      select(name, year, wind, pressure) %>%\n                      mutate(decade = as.numeric(paste0(substr(year, start = 1, stop = 3),0)))%>%\n                      arrange(decade)%>% \n                      group_by(decade) %>% \n                      summarize(Nobs = n(),\n                                min_wind = min(wind, na.rm = TRUE),\n                                mean_wind = mean(wind, na.rm = TRUE),\n                                max_wind = max(wind, na.rm = TRUE))\n```\n:::\n\n\n## Creating a plot \n\nTo create a plot, the key elements to be specified are:\n\n* the dataset\n* the mapping of variables to aesthetics (like x and y axes, color, shape, size, etc.)\n* the geometric objects that represent the data (e.g., points, lines, bars, etc.)\n\n### ggplot() \n\nTo initialize a plot, the key function of the package is **ggplot()**. The first argument **data** represents the data frame containing the variables to be plotted. \nThen, the **aes()** argument maps variables to aesthetics (e.g. x-axis, y-axis, color, size, etc ). Finally, layers from geometric object functions (e.g. `geom_point`, `geom_line`, `geom_bar`) allow to visualize data.\n\n* The ggplot() function doesn't plot anything—it sets up the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = storms_decade, aes(x = decade, y =mean_wind)) \n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n* You can choose the titles of the plot as well as the x-axis and the y-axis with **labs**: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n* To plot the figure, you need to add layers, with the sign : `+`. \n\n<i> We will now represent the average speed of storms per decade through different geometric visualizations. </i>\n\n### geom_point() & geom_line()\n\n#### <b> Use **geom_point()** to represent points </b>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point()\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n#### <b> Use **geom_line()** to represent lines and eventually connect points on the plot </b>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point() + \n     geom_line()\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n<b> Key Arguments </b>\n\n* To change the shape of your points use **shape**\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15) + \n     geom_line()\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n<i> By selecting **shape=15**, the points on the graph are represented by solid squares. You can look at the point shape options on this [blog](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/).</i>\n\n* To change the size of your points use **size**, and **linewidth** for the lines\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15, size=3) + \n     geom_line(linewidth=1)\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n* To change the color of your points and your lines use **color**\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15, size=3, color = \"red\") +\n     geom_line(linewidth=1, color=\"red\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n* To modify the transparency of the points use **alpha**\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15, size=3,color=\"red\", alpha=0.5) +\n     geom_line(linewidth=1, color=\"red\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n<i> The closer the alpha is to 0, the more transparent the points. If alpha equals 1, the points will be opaque. </i>\n\n### geom_bar()\n\n#### <b> Use **geom_bar()** to represent bars </b>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n<i> **stat=\"identity\"** allows to determine the size of the bars according to the mean_wind values (the variable included in the aes() function).</i>\n\n\n<b> Key Arguments </b>\n\n* You can color your bars with **fill** and their framework with **color**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_bar(stat=\"identity\", fill=\"red\", color=\"darkred\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n* To change the width of the bars use **width**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_bar(stat=\"identity\", fill=\"yellow\", width=5)\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### geom_histogram()\n\n#### <b> Use **geom_histogram()** to create an histogram </b>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(storms, aes(x=wind))+\n     labs(title=\"Histogram of wind speed observations\",\n          x=\"Wind speed\", y=\"Nb. observations\") + \n     geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n<b> Key Argument </b>\n\n* To define the size of bins according to the x-axis use **binwidth**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(storms, aes(x=wind))+\n     labs(title=\"Histogram of wind speed observations\",\n          x=\"Wind speed\", y=\"Nb. observations\") + \n     geom_histogram(color = \"darkgreen\", fill = \"lightgreen\", binwidth=10)\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### geom_boxplot() & geom_violin()\n\n#### <b> Use **geom_boxplot()** to create a boxplot </b> \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(storms, aes(y=wind)) +\n     labs(title=\"Boxplot of wind speed distribution\", \n          y=\"Wind speed\")+\n     geom_boxplot(fill=\"lightblue\", color=\"blue\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n<i> By default the plot is centered on the x-axis.</i>\n\n* To show the distribution within different groups, in this example within each month:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(storms, aes(x=as.factor(month), y=wind)) +\n     labs(title=\"Boxplots of wind speed distribution per month\",\n           x=\"Month\", y=\"Wind speed\")+\n     geom_boxplot(fill=\"lightblue\", color=\"blue\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n#### <b> Use **geom_violin()** to create a violin plot </b> \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(storms, aes(x=as.factor(month), y=wind)) +\n     labs(title=\"Violins of wind speed distribution per month\", \n          x=\"Month\", y=\"Wind speed\")+\n     geom_violin(fill=\"pink\", color=\"violet\")\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## Presentation tips\n\n### Theme customization with theme()\n\nYou can customize the prensentation of your graphics with `theme()`.\nWe present here example for the plot title customization with the **plot.title** argument. \n\n* To bold the text use **face** `\n\n* To change the font size use **size**\n\n* To change the color use **color**\n\n* To adjust the position use **hjust**\n\n     ** **hjust =0.5** to center the title; **0** to put the title to the left, and **1** to put the title to the right.\n\n* To change the font of the title use **family**\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n      labs(title=\"Average wind speed per decade\",\n           x=\"Date\", y=\"Average wind speed\") +\n      geom_point(shape=1, size=3, color=\"red\", alpha=0.5) +\n      geom_line(linewidth=1, color=\"red\") + \n      theme(plot.title=element_text(face=\"bold\", \n                                    size=15, \n                                    color=\"darkblue\", \n                                    hjust=0.5, \n                                    family=\"Times New Roman\"))\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n<i> NB : You can check which font its available in your computer with : **windowsFonts()** on windows, and with **quartzFonts()** on MacOS.</i>\n\n* To add space between the title, the axes name, and the graphic use `\\n`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n      labs(title=\"Average wind speed per decade \\n\",\n           x=\"\\n Date\", y=\"Average wind speed \\n\") +\n      geom_point(shape=1, size=3, color=\"red\", alpha=0.5) +\n      geom_line(linewidth=1, color=\"red\") + \n      theme(plot.title=element_text(face=\"bold\", \n                                    size=15, \n                                    color=\"darkblue\", \n                                    hjust=0.5, \n                                    family=\"Times New Roman\"))\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### coord_cartesian()\n\n`coord_cartesian()` controls the extent of the graph axes. It allows you to explicitly define the limits of the x and y axes of the graph (useful for zooming in or out on a specific part of the graph, while keeping the original data!) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n      labs(title=\"Average wind speed per decade \\n\",\n           x=\"\\n Date\", y=\"Average wind speed \\n\") +\n      geom_point(shape=1, size=3, color=\"red\", alpha=0.5) +\n      geom_line(linewidth=1, color=\"red\") + \n      theme(plot.title=element_text(face=\"bold\", \n                                    size=15, \n                                    color=\"darkblue\", \n                                    hjust=0.5, \n                                    family=\"Times New Roman\"))+\n      coord_cartesian(y=c(0,60))                              \n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nIn this example, **coord_cartesian(y=c(0,60))** allows to restrict the y-axis to the range from 0 to 60. \n\n### scale_color_manual()\n\nThe `scale_color_manual()` function is used to specify the colours associated with different values or levels of an aesthetic variable in a plot. \nWith the **name** argument, you specify the title of the color legend. \nWith the **values** arguments, you specify the colours associated with each value of the selected variable. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_speed <- ggplot(data=storms_decade) + \n                    labs(title=\"Wind speed statistics per decade \\n\",\n                         x=\"\\n Decade\", y=\"Wind Speed \\n\") +\n                    geom_point(aes(x=decade, y=mean_wind,color=\"Mean\")) + \n                    geom_line(aes(x=decade, y=mean_wind,color=\"Mean\"))+\n                    geom_point(aes(x=decade, y=min_wind,color=\"Min\")) + \n                    geom_line(aes(x=decade, y=min_wind,color=\"Min\"))+\n                    geom_point(aes(x=decade, y=max_wind,color=\"Max\")) + \n                    geom_line(aes(x=decade, y=max_wind,color=\"Max\")) + \n                    coord_cartesian(y=c(0,200))+  #personalize y-axis limits\n                    scale_color_manual(name=\"Statistic\",\n                                       values=c(\"Min\"=\"violet\",\n                                                \"Mean\"='#1B9E77',\n                                                \"Max\"='#D95F02'))+\n                    theme_minimal(base_size = 13) + \n                    theme(legend.position=\"top\",\n                          legend.title = element_text(size = 14),\n                          legend.text = element_text(size = 12),\n                          plot.title = element_text(size = 16, hjust = 0.5,face =\"bold\"),\n                          axis.title.x = element_text(size = 14, hjust = 0.5,face =\"bold\"),\n                          axis.title.y = element_text(size = 14, hjust = 0.5,face =\"bold\")\n                         )\nplot_speed                          \n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n<br>\n<i> NB : scale_fill_manual() functions exactely the same.</i> \n\n**theme(legend.X())** <br>\nAs for the title of the graphic, you can use theme.() function with legend.X, to put in bold, to change the size, the color, the position,... of the legend (its title, and its text). \n\n<br> \n\n### ggarrange()\n\nWith the `ggarrange()` function you can organize your plots : their size, their marges, etc. For example, you can create graphics mosaics, which display several graphs side by side in a single figure.\n\nFirst, ensure `ggpubr` is installed : `install.packages('ggpubr')` <br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"ggpubr\") #Load the library \n```\n:::\n\n\nYou can personalize a theme for displaying the plots in the same way, by creating a function theme() with the options you want. \n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_custom <- function(...) {\n            theme(plot.title = element_text(face = \"bold\", color=\"black\", hjust = 0.5), \n                  title = element_text(size=10))\n}\n```\n:::\n\n<i> With **title** you change the plot title and the x-axis and y-axis. With **plot.title** you change only the title of your plot.  \n\n\nChoose your plots and store them as objects to use  `ggarrange()` \n\n::: {.cell}\n\n```{.r .cell-code}\nplot1 <- ggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n          labs(title = \"Average wind speed per decade\",\n               x=\"Decade\", y=\"Average wind speed\") +\n          geom_point(shape=15, size=3,color = \"red\", alpha = 0.5) +\n          geom_line(linewidth=1, color=\"red\")+\n          theme_custom()\n\nplot2 <- ggplot(storms_decade, aes(x=decade, y=mean_wind)) + \n          labs(title=\"Average wind speed per decade\",\n               x=\"Decade\", y=\"Average wind speed\")  +\n          geom_bar(stat=\"identity\", fill = \"yellow\", width=5)+\n          theme_custom()\n\nplot3 <- ggplot(storms, aes(x=wind))+\n          labs(title=\"Histogram of wind speed\",\n               x=\"Wind speed\") +\n              geom_histogram(color = \"darkgreen\", fill=\"lightgreen\", binwidth=10)+\n              theme_custom()\n\nplot4 <- ggplot(storms, aes(y = wind)) +\n          labs(title=\"Boxplot of wind speed\",\n               x=\"\", y=\"Wind speed\") +\n          geom_boxplot(fill=\"lightblue\", color=\"blue\") +\n          theme_custom()+\n          theme(axis.text.x=element_blank(),\n                axis.ticks.x=element_blank())\n```\n:::\n\n\nYou can create a mosaic with your plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(plot1, plot2, plot3, plot4, nrow = 2, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Tuto3_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### ggsave()\n\nTo save a graphic that you have created with ggplot2, you can use `ggsave()`. It saves the graph as an image file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename='./img/wind_speed_stats.png', plot=plot1, height=10, width=15)\n```\n:::\n\n\n* The image format (as PNG here, or JPEG, PDF, etc...) is defined in the **filename** argument.           \n\n* The image dimension is based on the arguments **height** and **width**. Here, we saved an image of 15*10 inch. \n\n",
    "supporting": [
      "Tuto3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}