[
  {
    "objectID": "toolbox.html",
    "href": "toolbox.html",
    "title": "Toolbox",
    "section": "",
    "text": "Data wrangling with ‘dplyr’ in R\n\n\n\n\n\n\n\n\n\n\n\n\nJul 12, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Jupyter Notebook with R kernel\n\n\n\n\n\n\n\n\n\n\n\n\nJun 28, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tools/Tuto1.html",
    "href": "tools/Tuto1.html",
    "title": "Setting up Jupyter Notebook with R kernel",
    "section": "",
    "text": "Prepared by Claire Lepault and Marie Sevestre \nJupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Within a notebook, you can write and execute code snippets in cells, which can be individually executed. Jupyter Notebook supports various programming languages, including Python, R, Julia (whose Jupyter name is derived), and many others, through different kernels.\nIn this tutorial, we provide command lines to install Jupyter Notebook and R kernel on Ubuntu and macOS.\n\n\nInstallation of Jupyter Notebook\nWe assume that python3 is already installed on your computer. (You can check by using the command python3 –version in the terminal and eventually download it here.)\nTo install Jupyter Notebook, you typically use pip the package management system for installing and managing Python packages. By using pip, you ensure thant the required dependencies and components are installed correctly, including Jupyter Notebook.\nOn Ubuntu and macOS, you can respectively follow the steps :\n\nOn Ubuntu (version 22.04, python 3.10.6 tested here) in the computer’s terminal :\n\n\nTo install pip\n  $ sudo apt install python3-pip \nTo install Jupyter\n  $ pip3 install jupyter \nTo open Jupyter Notebook\n  $ jupyter notebook \n\n\nOn macOS (version 12.1, python 3.8.5 tested here) in the computer’s terminal :\n\nTo install pip\n  $ install python3-pip \nTo install Jupyter\n  $ pip3 install jupyter \nTo open Jupyter Notebook \n  $ jupyter notebook \n\n\nIf the Jupyter installation was successful, but you are still unable to open Jupyter Notebook, you may need to restart your computer.\nOther tips: If you want to check the installed versions of python3 and pip and eventually upgrade them, you can use the following commands in the terminal:\n\nTo check the installed version of python \n  $ python3 --version \nTo check the installed version of pip\n  $ pip3 --version \nTo make sure that all packages are up-to-date : \n  $ pip3 install --upgrade pip3 \n\n\n\nAt this stage, you can only open a Jupyter Notebook in Python.  You can now follow the tutorial below to install the R kernel so that you can open a Jupyter Notebook in R.\n\n\nInstallation of R kernel\nWe assume that R is already installed on your computer. (You can download it here using the documentation related to your system. On Ubuntu, the steps proposed by Daniel Weitzel are very useful.)\nR kernel is a software component that allows you to run R code and create R notebooks within the Jupyter Notebook interface. In comparison with Rmarkdown, Jupyter Notebook with R kernel provides a web-based interface that allows you to edit and execute code cells interactively. It is great for interactive execution and exploration of code.\nOn both Ubuntu and macOS:\n\nYou can use the computer’s terminal :\n\nTo launch the R console \n  $ R \nTo install the IRkernel packages \n  &gt; install.packages(‘IRkernel')  \nTo link IRkernel with Jupyter Notebook \n  &gt; IRkernel::installspec()  \n\n\nOr if you are used to Rstudio, you can work directly in the Rstudio console:\n\n  install.packages(‘IRkernel')                                              \n  IRkernel::installspec()\n\n\n\nCreate a R notebook\nYou can open Jupyter Notebook from the computer’s terminal using the command:\n  \n    $ jupyter notebook \n  \n\nIf you have well installed IRkernel on your computer, you can now create a R notebook !"
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks",
    "section": "",
    "text": "Conferences\n\n2023: AERE summer conference (Portland, Maine), IPWSD at Columbia University (New York), Journées doctorales du développement (Orléans)  Scheduled : ICDE (Paris)\n2022: ENR international conference (Orléans), Journées LAGV (Marseille), Nordic Conference in Development Economics (Helsinki), EAERE annual conference (Rimini), FAERE annual conference (Rouen)\n\n\n\nSeminars\n\n2023: UO Micro applied seminar (Eugene, Oregon), PSE CFD seminar (Paris)\n2022: TSE Workshop (Toulouse), PSE REM seminar (Paris), CIRED PhD student seminar (Paris), PSE CFD seminar (Paris)\n2021: PSE CFD seminar (Paris)\n2019: CIRED Bricol’R (Paris)"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Teaching Assistant at SciencesPo Paris|PSIA\n\nNatural Resources Economics (M1, taught in English), Pr. L.-G. Giraudet  Fall 2020, 2021, 2022\n\n\nTeaching Assistant at University Paris I Panthéon-Sorbonne\n\nIntroduction to Econometrics (L3, taught in French), Pr. C. Doz and T. Broer  Spring 2022\nStatistics : Probabilities (L2, taught in French), Pr. D. Brochard and E. Defebvre  Fall 2021"
  },
  {
    "objectID": "CV.html",
    "href": "CV.html",
    "title": "CV",
    "section": "",
    "text": "Full CV\n\nEducation\n\n2020 – Present: Ph.D. in Economics, Paris School of Economics, ENPC, CIRED\nSpring 2023: Visiting in the Economics department of the University of Oregon\n2019 – 2020: Master 2 Analysis and Policy in Economics, Paris School of Economics\n2016 – 2020: Engineering degree, Ecole Nationale des Ponts et Chaussées (ENPC)\n2014 – 2016: Two years of intensive preparatory courses in Mathematics and Physics (MPSI-MP*), Lycee Blaise Pascal (Orsay)\n\n\nRelevant Experience\n\n2018 – 2020: Research Assistant at CIRED  Work with Franck Lecocq, CLA of Chapter 4 of the IPCC AR6 (WG III)\nSpring 2019: Research Assistant at the Energy Research Centre (Cape Town, South Africa)  Work with Harald Winkler, CLA of Chapter 4 of the IPCC AR6 (WG III)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Claire Lepault",
    "section": "",
    "text": "Welcome! I am PhD candidate at the Paris School of Economics (PSE) and CIRED (via ENPC). My advisors are Hélène Ollivier and Philippe Quirion.\nMy research lies at the intersection of environmental, development and health economics, more specifically on issues related to water pollution and climate change in India.\nIn spring 2023, I have been visiting the University of Oregon hosted by Ed Rubin.\nBefore the PhD, I received an engineering degree at ENPC and a master Analysis and Policy in Economics at PSE. Much of my motivation comes from experience working for the Intergovernmental Panel on Climate Change (IPCC) at CIRED.\nContact : claire.lepault [at] psemail.eu\nPlease feel free to get in touch!"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Work in progress\nIs urban wastewater treatment effective in India?\nHeat stress, hydraulic conditions and health in India with Philippe Quirion and Pierre Uginet\nFertilizers, water quality and perinatal health in India with Eléonore Rouault \n\n\nPublication\nMapping forward-looking mitigation studies at country level, Claire Lepault and Franck Lecocq, Environmental Research Letters, Volume 16.8, July 2021  link to open access article | code \n\n\nOther contributions\n\nContributing Author of Chapter 4: Mitigation and development pathways in the near- to mid-term of the \\(6^{th}\\) IPCC Assessment Report (AR6, WG III)\nParticipation in the creation of the AR6 Scenarios Database"
  },
  {
    "objectID": "tools/Tuto2.html",
    "href": "tools/Tuto2.html",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "",
    "text": "dplyr offers a simple and consistent code syntaxe for data manipulation. We provide here short examples of the key dplyr verbs: select(), filter(), arrange(), mutate(), summarize() and group_by()."
  },
  {
    "objectID": "tools/Tuto2.html#ensure-tidyverse-is-installed",
    "href": "tools/Tuto2.html#ensure-tidyverse-is-installed",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Ensure tidyverse is installed",
    "text": "Ensure tidyverse is installed\nThe dplyr package is part of the tidyverse (Hadleyverse), and it follows a grammar-based approach to programming/data work.\nFirst, ensure tidyverse is installed : install.packages('tidyverse') \n\nlibrary(\"tidyverse\") #Load the library \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntidyverse_packages() #Display the packages\n\n [1] \"broom\"         \"conflicted\"    \"cli\"           \"dbplyr\"       \n [5] \"dplyr\"         \"dtplyr\"        \"forcats\"       \"ggplot2\"      \n [9] \"googledrive\"   \"googlesheets4\" \"haven\"         \"hms\"          \n[13] \"httr\"          \"jsonlite\"      \"lubridate\"     \"magrittr\"     \n[17] \"modelr\"        \"pillar\"        \"purrr\"         \"ragg\"         \n[21] \"readr\"         \"readxl\"        \"reprex\"        \"rlang\"        \n[25] \"rstudioapi\"    \"rvest\"         \"stringr\"       \"tibble\"       \n[29] \"tidyr\"         \"xml2\"          \"tidyverse\""
  },
  {
    "objectID": "tools/Tuto2.html#the-pipe-operator",
    "href": "tools/Tuto2.html#the-pipe-operator",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "The pipe operator",
    "text": "The pipe operator\n\nPipes & dplyr\nPipes are a simplifying programming tool that make your code easier to read. In dplyr, the expression for a pipe is %&gt;%.\n\n\nWhat is a pipe ?\nPipes take the output of a function as the input/argument of another function. R’s pipe specifically plugs the returned object to the left of the pipe into the first argument of the function on the right fo the pipe.\nExample: generate a random sample and obtain its mean\n\nrnorm(10) %&gt;%  #rnorm(n) generates a random sample of n observations from a normal distribution \n    mean()\n\n[1] 0.339686\n\n\nPipes avoid nested functions, prevent excessive writing to your disc, and increase the readability of our R scripts. By default, R pipes the output from the LHS of the pipe into the first argument of the function on the RHS of the pipe.  For example, a %&gt;% fun(3) is equivalent of fun(arg1=a, arg2 = 3)"
  },
  {
    "objectID": "tools/Tuto2.html#the-storms-database",
    "href": "tools/Tuto2.html#the-storms-database",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "The storms database",
    "text": "The storms database\nTo introduce dplyr` verbs with pipes, we will use the storms database, which is the NOAA Atlantic hurricane database best track data. The data includes the positions and attributes of storms from 1975-2021. Storms from 1979 onward are measured every six hours during the lifetime of the storms.\nIf you want to learn more about storms :\n\n?storms\n\n NB : In the following sections, the head(n) and tail(n) functions are used for the presentation, to show only the first or last n or rows of the database.\n\nstorms %&gt;%\n    head(2)\n\n# A tibble: 2 × 13\n  name   year month   day  hour   lat  long status       category  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;           &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0  27.5   -79 tropical de…       NA    25     1013\n2 Amy    1975     6    27     6  28.5   -79 tropical de…       NA    25     1013\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "tools/Tuto2.html#select-columns-with-select",
    "href": "tools/Tuto2.html#select-columns-with-select",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Select columns with select()",
    "text": "Select columns with select()\nIf you want to select specific columns of a dataframe, you can use select().\n\nSelection based on columns names\n\nUse commas to select multiple columns out of a data frame:\n\n\nstorms %&gt;% \n    select(name, year, month, day, hour, wind, pressure)%&gt;%\n    head(5)\n\n# A tibble: 5 × 7\n  name   year month   day  hour  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0    25     1013\n2 Amy    1975     6    27     6    25     1013\n3 Amy    1975     6    27    12    25     1013\n4 Amy    1975     6    27    18    25     1013\n5 Amy    1975     6    28     0    25     1012\n\n\n\nYou can use “first:last” for consecutive columns:\n\n\nstorms %&gt;% \n    select(name:hour, wind, pressure)%&gt;%\n    head(5)\n\n# A tibble: 5 × 7\n  name   year month   day  hour  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0    25     1013\n2 Amy    1975     6    27     6    25     1013\n3 Amy    1975     6    27    12    25     1013\n4 Amy    1975     6    27    18    25     1013\n5 Amy    1975     6    28     0    25     1012\n\n\n\nYou can deselect a column with -:\n\n\nstorms %&gt;% \n    select(name:hour, wind, pressure, -day)%&gt;%\n    head(5)\n\n# A tibble: 5 × 6\n  name   year month  hour  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6     0    25     1013\n2 Amy    1975     6     6    25     1013\n3 Amy    1975     6    12    25     1013\n4 Amy    1975     6    18    25     1013\n5 Amy    1975     6     0    25     1012\n\n\n\n\nSelection based on string characters\nselect(contains(PATTERN)) allows to select columns in a dataframe which contain a specific “PATTERN”. It provides a nice shortcut in relevant cases:\n\nstorms %&gt;% \n    select(name, contains(\"diameter\"))%&gt;%\n    tail(5)\n\n# A tibble: 5 × 3\n  name  tropicalstorm_force_diameter hurricane_force_diameter\n  &lt;chr&gt;                        &lt;int&gt;                    &lt;int&gt;\n1 Wanda                           60                        0\n2 Wanda                           60                        0\n3 Wanda                           90                        0\n4 Wanda                           90                        0\n5 Wanda                           70                        0\n\n\nHere, we have selected the columns whose names contain the word “diameter”.\n\n\nRename variables\nYou can also rename some (or all) of your selected variables in place:\n\nstorms %&gt;%\n    select(alias=name, year, month, day, hour, wind_speed=wind, ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    head(5)\n\n# A tibble: 5 × 7\n  alias  year month   day  hour wind_speed ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;      &lt;int&gt;       &lt;int&gt;\n1 Amy    1975     6    27     0         25          NA\n2 Amy    1975     6    27     6         25          NA\n3 Amy    1975     6    27    12         25          NA\n4 Amy    1975     6    27    18         25          NA\n5 Amy    1975     6    28     0         25          NA\n\n\nIf you just want to rename columns without subsetting them, you can use rename:\n\nstorms %&gt;%\n    rename(alias=name, wind_speed=wind, ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    head(5)\n\n# A tibble: 5 × 13\n  alias  year month   day  hour   lat  long status  category wind_speed pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;      &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0  27.5 -79   tropic…       NA         25     1013\n2 Amy    1975     6    27     6  28.5 -79   tropic…       NA         25     1013\n3 Amy    1975     6    27    12  29.5 -79   tropic…       NA         25     1013\n4 Amy    1975     6    27    18  30.5 -79   tropic…       NA         25     1013\n5 Amy    1975     6    28     0  31.5 -78.8 tropic…       NA         25     1012\n# ℹ 2 more variables: ts_diameter &lt;int&gt;, hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "tools/Tuto2.html#filter-observations-with-filter",
    "href": "tools/Tuto2.html#filter-observations-with-filter",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Filter observations with filter()",
    "text": "Filter observations with filter()\nTo keep observations, that validate a particular condition, you can use filter().\nWe can chain multiple filter commands with the pipe %&gt;% or just separate them within a single filter command using commas:\n\nstorms %&gt;% \n    select(name,year,month,day)%&gt;%\n    filter(year==2008,month &gt;= 6)%&gt;%\n    head(3)\n\n# A tibble: 3 × 4\n  name    year month   day\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 Arthur  2008     6     1\n2 Arthur  2008     6     1\n3 Arthur  2008     6     1\n\n\nHere, we have selected the columns “name”, “year”, “month” and “day” thanks to select(). With filter(), we keep row data with “year” equal to 2008 and “month” equal to or greater than six.\n\nUsing logical operators\nWe can use the & (“and”) and/or | (“or”) logical operators:\n\nstorms %&gt;% \n    select(name,year,month,day)%&gt;%\n    filter(year==2008 | month &gt;= 6)%&gt;%\n    head(3)\n\n# A tibble: 3 × 4\n  name   year month   day\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 Amy    1975     6    27\n2 Amy    1975     6    27\n3 Amy    1975     6    27\n\n\n\n\nUsing regular expressions\nThe grepl() function allows to find the pattern in a character string.\n\nstorms %&gt;% \n    select(name:status)%&gt;%\n    filter(grepl(\"tropical\", status))%&gt;%\n    head(5)\n\n# A tibble: 5 × 8\n  name   year month   day  hour   lat  long status             \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;              \n1 Amy    1975     6    27     0  27.5 -79   tropical depression\n2 Amy    1975     6    27     6  28.5 -79   tropical depression\n3 Amy    1975     6    27    12  29.5 -79   tropical depression\n4 Amy    1975     6    27    18  30.5 -79   tropical depression\n5 Amy    1975     6    28     0  31.5 -78.8 tropical depression\n\n\nHere, we have kept the rows where the word “tropical” appears in the “status” column. \n\n\nMissing values\nA very common filter use case is identifying (or removing) missing data cases:\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(is.na(ts_diameter))%&gt;% \n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Amy    1975     6    27     0          NA\n2 Amy    1975     6    27     6          NA\n3 Amy    1975     6    27    12          NA\n\n\nHere, we have renamed the column “tropicalstorm_force_diameter” in “ts_diameter”. The use of the filter() function, with the is.na() function, allows to filter the rows where the “ts_diameter” columns is missing (=“NA”).\n\nTo remove missing observations, simply use negation: filter(!is.na(ts_diameter))\n\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(!is.na(ts_diameter))%&gt;% \n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Alex   2004     7    31    18           0\n2 Alex   2004     8     1     0           0\n3 Alex   2004     8     1     6           0"
  },
  {
    "objectID": "tools/Tuto2.html#sort-data-with-arrange",
    "href": "tools/Tuto2.html#sort-data-with-arrange",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Sort data with arrange()",
    "text": "Sort data with arrange()\nYou can arrange your data according to a colums, with the arrange() function.\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(!is.na(ts_diameter))%&gt;%\n    arrange(ts_diameter)%&gt;%\n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Alex   2004     7    31    18           0\n2 Alex   2004     8     1     0           0\n3 Alex   2004     8     1     6           0\n\n\nHere, the arrange() function is used to sort the rows according to the “ts_diameter” columns, by ascensing order.\n\nDescending order\nBy default, sorting will be organised by ascending order. We can also arrange items in descending order using arrange(desc()).\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(!is.na(ts_diameter))%&gt;%\n    arrange(desc(ts_diameter))%&gt;%\n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Oscar  2018    11     3    12        1440\n2 Oscar  2018    11     3     6        1230\n3 Oscar  2018    11     3    18        1140"
  },
  {
    "objectID": "tools/Tuto2.html#create-news-variable-with-mutate",
    "href": "tools/Tuto2.html#create-news-variable-with-mutate",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Create news variable with mutate()",
    "text": "Create news variable with mutate()\nYou can create new columns from scratch, or (more commonly) as transformations of existing columns.\n\nstorms %&gt;% \n    select(name, year, month, day) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0),\n           quarter = ifelse(month %in% c(12,1,2), \"Winter\",\n                        ifelse(month %in% 3:5, \"Spring\", \n                            ifelse(month %in% 6:8,\"Summer\",\"Automn\"))),\n            text = paste0(name, \" occured in the \", decade,\"'s\"))%&gt;%\n    head(4)\n\n# A tibble: 4 × 7\n  name   year month   day decade quarter text                     \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;                    \n1 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n2 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n3 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n4 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n\n\nHere, we have created 3 columns :\n\n“decade” is composed of the first three digits of the column year (extracted with the substr() function) followed by a 0 (concatenated to the first 3 digits thanks to the paste0() function).\n“quarter” reprensents the quarter season based on the month value\n“text” contains the concatenation of the name of the storm, the expression “occurred in the” and the corresponding decade.\n\nmutate is order aware. So you can chain multiple mutates in a single call.\n\nmutate_if\nmutate_if() allows you to easily work on a subset of variables.\n\nstorms %&gt;% \n    select(name:status) %&gt;% \n    mutate(status=as.character(status))%&gt;%\n    mutate_if(is.character, toupper) %&gt;% \n    head(5)\n\n# A tibble: 5 × 8\n  name   year month   day  hour   lat  long status             \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;              \n1 AMY    1975     6    27     0  27.5 -79   TROPICAL DEPRESSION\n2 AMY    1975     6    27     6  28.5 -79   TROPICAL DEPRESSION\n3 AMY    1975     6    27    12  29.5 -79   TROPICAL DEPRESSION\n4 AMY    1975     6    27    18  30.5 -79   TROPICAL DEPRESSION\n5 AMY    1975     6    28     0  31.5 -78.8 TROPICAL DEPRESSION\n\n\nThe toupper() function converts a character string in uppercase. So with the mutate_if(is.character) function, here, if the columns of the storms dataframe are character strings, the toupper() function will be apply.\n\n\nmutate_at & mutate_all\nmutate_at and mutate_all are also helpful. mutate_at allows to modify specified columns. The list argument enables to choose the suffix added to the name of the column that is “mutated”.\n\nstorms %&gt;% \n    select(name:status) %&gt;% \n    mutate_at(vars(name,status), list(UP =~ toupper(.))) %&gt;% \n    head(3)\n\n# A tibble: 3 × 10\n  name   year month   day  hour   lat  long status             name_UP status_UP\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;              &lt;chr&gt;   &lt;chr&gt;    \n1 Amy    1975     6    27     0  27.5   -79 tropical depressi… AMY     TROPICAL…\n2 Amy    1975     6    27     6  28.5   -79 tropical depressi… AMY     TROPICAL…\n3 Amy    1975     6    27    12  29.5   -79 tropical depressi… AMY     TROPICAL…\n\n\nHere, we have created the “name_UP” and “status_UP” columns, by converting the “name” and “status” column values in uppercase."
  },
  {
    "objectID": "tools/Tuto2.html#agregate-operations-with-summarize-and-group_by",
    "href": "tools/Tuto2.html#agregate-operations-with-summarize-and-group_by",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Agregate operations with summarize() and group_by()",
    "text": "Agregate operations with summarize() and group_by()\nsummarize() summarizes variables: you choose the variables and the summaries (e.g., mean() or min()). When using group_by(), summaries are done by groups:\n\nstorms %&gt;% \n    select(name, year, wind, pressure) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0))%&gt;%\n    group_by(decade) %&gt;%                                       # for each decade\n    summarize(Nobs = n(),                                      #number of observations\n              mean_wind = mean(wind, na.rm = TRUE),            #average wind speed\n              max_pressure = max(pressure, na.rm = TRUE))%&gt;%   #maximum pressure\n    head(4)\n\n# A tibble: 4 × 4\n  decade  Nobs mean_wind max_pressure\n  &lt;chr&gt;  &lt;int&gt;     &lt;dbl&gt;        &lt;int&gt;\n1 1970     932      50.9         1015\n2 1980    2674      51.0         1018\n3 1990    3895      51.4         1020\n4 2000    5000      49.9         1024\n\n\n\nNote that including “na.rm = TRUE” (or, its alias “na.rm = T”) is usually a good idea with summarize functions. Otherwise, any missing value will propogate to the summarized value too.\n\n\nstorms %&gt;% \n    summarize(mean_ts_diameter = mean(tropicalstorm_force_diameter))\n\n# A tibble: 1 × 1\n  mean_ts_diameter\n             &lt;dbl&gt;\n1               NA\n\n\n\nstorms %&gt;%\n    summarize(mean_ts_diameter = mean(tropicalstorm_force_diameter, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_ts_diameter\n             &lt;dbl&gt;\n1             146.\n\n\n\nsummarize_if, summarize_at and summarize_all\nThe same if-, at- and all-based workflow that we saw with mutate a few slides back also works with summarize.\n\nstorms %&gt;% \n    select(name, year, wind, pressure) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0))%&gt;%\n    group_by(decade) %&gt;% \n    summarize_if(is.numeric, mean, na.rm=T) %&gt;%\n    head(4)\n\n# A tibble: 4 × 4\n  decade  year  wind pressure\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1 1970   1977.  50.9     995.\n2 1980   1985.  51.0     994.\n3 1990   1995.  51.4     993.\n4 2000   2004.  49.9     993.\n\n\n\nstorms %&gt;% \n    select(year, wind, pressure) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0))%&gt;%\n    select(-year)%&gt;%group_by(decade) %&gt;% \n    summarize_all(list(Mean=~mean(.,na.rm=TRUE), \n                       Min=~min(.,na.rm=TRUE),\n                       Max=~max(.,na.rm=TRUE)))\n\n# A tibble: 6 × 7\n  decade wind_Mean pressure_Mean wind_Min pressure_Min wind_Max pressure_Max\n  &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;    &lt;int&gt;        &lt;int&gt;    &lt;int&gt;        &lt;int&gt;\n1 1970        50.9          995.       15          924      150         1015\n2 1980        51.0          994.       10          888      165         1018\n3 1990        51.4          993.       10          905      155         1020\n4 2000        49.9          993.       10          882      160         1024\n5 2010        49.0          994.       15          908      160         1021\n6 2020        47.8          995.       15          917      135         1018"
  }
]