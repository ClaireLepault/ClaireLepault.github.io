[
  {
    "objectID": "toolbox.html",
    "href": "toolbox.html",
    "title": "Toolbox",
    "section": "",
    "text": "I’m grateful to Andrew Dickinson for his advice on using Quarto to create this website!\nBelow are short tutorials on setting up Jupyter Notebook with R kernel, wrangling data with dplyr, visualizing data with ggplot2, doing geospatial analysis with sf, and performing regressions with fixest:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up Jupyter Notebook with R kernel\n\n\n\n\n\n\n\n\n\nJun 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData wrangling with ‘dplyr’ in R\n\n\n\n\n\n\n\n\n\nJul 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData visualization with ‘ggplot2’ in R\n\n\n\n\n\n\n\n\n\nJul 31, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeospatial analysis with ‘sf’ in R\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApplied econometrics with ‘fixest’ in R\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tools/Tuto1.html",
    "href": "tools/Tuto1.html",
    "title": "Setting up Jupyter Notebook with R kernel",
    "section": "",
    "text": "Prepared by Claire Lepault and Marie Sevestre \nJupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Within a notebook, you can write and execute code snippets in cells, which can be individually executed. Jupyter Notebook supports various programming languages, including Python, R, Julia (whose Jupyter name is derived), and many others, through different kernels.\nIn this tutorial, we provide command lines to install Jupyter Notebook and R kernel on Ubuntu and macOS.\n\n\nInstallation of Jupyter Notebook\nWe assume that python3 is already installed on your computer. (You can check by using the command python3 –version in the terminal and eventually download it here.)\nTo install Jupyter Notebook, you typically use pip the package management system for installing and managing Python packages. By using pip, you ensure thant the required dependencies and components are installed correctly, including Jupyter Notebook.\nOn Ubuntu and macOS, you can respectively follow the steps :\n\nOn Ubuntu (version 22.04, python 3.10.6 tested here) in the computer’s terminal :\n\n\nTo install pip\n  $ sudo apt install python3-pip \nTo install Jupyter\n  $ pip3 install jupyter \nTo open Jupyter Notebook\n  $ jupyter notebook \n\n\nOn macOS (version 12.1, python 3.8.5 tested here) in the computer’s terminal :\n\nTo install pip\n  $ install python3-pip \nTo install Jupyter\n  $ pip3 install jupyter \nTo open Jupyter Notebook \n  $ jupyter notebook \n\n\nIf the Jupyter installation was successful, but you are still unable to open Jupyter Notebook, you may need to restart your computer.\nOther tips: If you want to check the installed versions of python3 and pip and eventually upgrade them, you can use the following commands in the terminal:\n\nTo check the installed version of python \n  $ python3 --version \nTo check the installed version of pip\n  $ pip3 --version \nTo make sure that all packages are up-to-date : \n  $ pip3 install --upgrade pip3 \n\n\n\nAt this stage, you can only open a Jupyter Notebook in Python.  You can now follow the tutorial below to install the R kernel so that you can open a Jupyter Notebook in R.\n\n\nInstallation of R kernel\nWe assume that R is already installed on your computer. (You can download it here using the documentation related to your system. On Ubuntu, the steps proposed by Daniel Weitzel are very useful.)\nR kernel is a software component that allows you to run R code and create R notebooks within the Jupyter Notebook interface. In comparison with Rmarkdown, Jupyter Notebook with R kernel provides a web-based interface that allows you to edit and execute code cells interactively. It is great for interactive execution and exploration of code.\nOn both Ubuntu and macOS:\n\nYou can use the computer’s terminal :\n\nTo launch the R console \n  $ R \nTo install the IRkernel packages \n  &gt; install.packages(‘IRkernel')  \nTo link IRkernel with Jupyter Notebook \n  &gt; IRkernel::installspec()  \n\n\nOr if you are used to Rstudio, you can work directly in the Rstudio console:\n\n  install.packages(‘IRkernel')                                              \n  IRkernel::installspec()\n\n\n\nCreate a R notebook\nYou can open Jupyter Notebook from the computer’s terminal using the command:\n  \n    $ jupyter notebook \n  \n\nIf you have well installed IRkernel on your computer, you can now create a R notebook !"
  },
  {
    "objectID": "tools/Tuto3.html",
    "href": "tools/Tuto3.html",
    "title": "Data visualization with ‘ggplot2’ in R",
    "section": "",
    "text": "ggplot2 is a data visualization package widely used for creating sophisticated plots. It was developped by Hadley Wickham and is based on the Grammar of Graphics (gg), which is a systematic framework for understanding and constructing data visualizations."
  },
  {
    "objectID": "tools/Tuto3.html#to-get-started",
    "href": "tools/Tuto3.html#to-get-started",
    "title": "Data visualization with ‘ggplot2’ in R",
    "section": "To get started !",
    "text": "To get started !\n\nEnsure tidyverse is installed\nThe ggplot2 package is part of the tidyverse (Hadleyverse).\nFirst, ensure tidyverse is installed : install.packages('tidyverse') \n\nlibrary(\"tidyverse\") #Load the library \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nThe storms database\nAs in the dplyr tutorial, we will work with the storms dataset to present the package. Thanks to the tidyverse library, we have already loaded the dplyr package. storms is the NOAA Atlantic hurricane database best track data. The data includes the positions and attributes of storms from 1975-2021. Storms from 1979 onward are measured every six hours during the lifetime of the storms.\nIf you want to learn more about storms :\n\n?storms\n\nFor example, we will be looking at the average, minimum and maximum wind speed of storms per decade. To do this, we create the storms_decade dataset :\n\nstorms_decade &lt;- storms %&gt;% \n                      select(name, year, wind, pressure) %&gt;%\n                      mutate(decade = as.numeric(paste0(substr(year, start = 1, stop = 3),0)))%&gt;%\n                      arrange(decade)%&gt;% \n                      group_by(decade) %&gt;% \n                      summarize(Nobs = n(),\n                                min_wind = min(wind, na.rm = TRUE),\n                                mean_wind = mean(wind, na.rm = TRUE),\n                                max_wind = max(wind, na.rm = TRUE))"
  },
  {
    "objectID": "tools/Tuto3.html#creating-a-plot",
    "href": "tools/Tuto3.html#creating-a-plot",
    "title": "Data visualization with ‘ggplot2’ in R",
    "section": "Creating a plot",
    "text": "Creating a plot\nTo create a plot, the key elements to be specified are:\n\nthe dataset\nthe mapping of variables to aesthetics (like x and y axes, color, shape, size, etc.)\nthe geometric objects that represent the data (e.g., points, lines, bars, etc.)\n\n\nggplot()\nTo initialize a plot, the key function of the package is ggplot(). The first argument data represents the data frame containing the variables to be plotted. Then, the aes() argument maps variables to aesthetics (e.g. x-axis, y-axis, color, size, etc ). Finally, layers from geometric object functions (e.g. geom_point, geom_line, geom_bar) allow to visualize data.\n\nThe ggplot() function doesn’t plot anything—it sets up the plot.\n\n\nggplot(data = storms_decade, aes(x = decade, y =mean_wind)) \n\n\n\n\n\nYou can choose the titles of the plot as well as the x-axis and the y-axis with labs:\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\")\n\n\n\n\n\nTo plot the figure, you need to add layers, with the sign : +.\n\n We will now represent the average speed of storms per decade through different geometric visualizations. \n\n\ngeom_point() & geom_line()\n\n Use geom_point() to represent points \n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point()\n\n\n\n\n\n\n Use geom_line() to represent lines and eventually connect points on the plot \n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point() + \n     geom_line()\n\n\n\n\n Key Arguments \n\nTo change the shape of your points use shape\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15) + \n     geom_line()\n\n\n\n\n By selecting shape=15, the points on the graph are represented by solid squares. You can look at the point shape options on this blog.\n\nTo change the size of your points use size, and linewidth for the lines\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15, size=3) + \n     geom_line(linewidth=1)\n\n\n\n\n\nTo change the color of your points and your lines use color\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15, size=3, color = \"red\") +\n     geom_line(linewidth=1, color=\"red\")\n\n\n\n\n\nTo modify the transparency of the points use alpha\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_point(shape=15, size=3,color=\"red\", alpha=0.5) +\n     geom_line(linewidth=1, color=\"red\")\n\n\n\n\n The closer the alpha is to 0, the more transparent the points. If alpha equals 1, the points will be opaque. \n\n\n\ngeom_bar()\n\n Use geom_bar() to represent bars \n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_bar(stat = \"identity\")\n\n\n\n\n stat=“identity” allows to determine the size of the bars according to the mean_wind values (the variable included in the aes() function).\n Key Arguments \n\nYou can color your bars with fill and their framework with color.\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_bar(stat=\"identity\", fill=\"red\", color=\"darkred\")\n\n\n\n\n\nTo change the width of the bars use width\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) + \n     labs(title=\"Average wind speed per decade\", \n          x=\"Decade\", y=\"Average wind speed\") +\n     geom_bar(stat=\"identity\", fill=\"yellow\", width=5)\n\n\n\n\n\n\n\ngeom_histogram()\n\n Use geom_histogram() to create an histogram \n\nggplot(storms, aes(x=wind))+\n     labs(title=\"Histogram of wind speed observations\",\n          x=\"Wind speed\", y=\"Nb. observations\") + \n     geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n Key Argument \n\nTo define the size of bins according to the x-axis use binwidth\n\n\nggplot(storms, aes(x=wind))+\n     labs(title=\"Histogram of wind speed observations\",\n          x=\"Wind speed\", y=\"Nb. observations\") + \n     geom_histogram(color = \"darkgreen\", fill = \"lightgreen\", binwidth=10)\n\n\n\n\n\n\n\ngeom_boxplot() & geom_violin()\n####  Use geom_boxplot() to create a boxplot \n\nggplot(storms, aes(y=wind)) +\n     labs(title=\"Boxplot of wind speed distribution\", \n          y=\"Wind speed\")+\n     geom_boxplot(fill=\"lightblue\", color=\"blue\")\n\n\n\n\n By default the plot is centered on the x-axis.\n\nTo show the distribution within different groups, in this example within each month:\n\n\nggplot(storms, aes(x=as.factor(month), y=wind)) +\n     labs(title=\"Boxplots of wind speed distribution per month\",\n           x=\"Month\", y=\"Wind speed\")+\n     geom_boxplot(fill=\"lightblue\", color=\"blue\")\n\n\n\n\n\n Use geom_violin() to create a violin plot \n\nggplot(storms, aes(x=as.factor(month), y=wind)) +\n     labs(title=\"Violins of wind speed distribution per month\", \n          x=\"Month\", y=\"Wind speed\")+\n     geom_violin(fill=\"pink\", color=\"violet\")"
  },
  {
    "objectID": "tools/Tuto3.html#presentation-tips",
    "href": "tools/Tuto3.html#presentation-tips",
    "title": "Data visualization with ‘ggplot2’ in R",
    "section": "Presentation tips",
    "text": "Presentation tips\n\nTheme customization with theme()\nYou can customize the prensentation of your graphics with theme(). We present here example for the plot title customization with the plot.title argument.\n\nTo bold the text use face `\nTo change the font size use size\nTo change the color use color\nTo adjust the position use hjust\n** hjust =0.5 to center the title; 0 to put the title to the left, and 1 to put the title to the right.\nTo change the font of the title use family\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n      labs(title=\"Average wind speed per decade\",\n           x=\"Date\", y=\"Average wind speed\") +\n      geom_point(shape=1, size=3, color=\"red\", alpha=0.5) +\n      geom_line(linewidth=1, color=\"red\") + \n      theme(plot.title=element_text(face=\"bold\", \n                                    size=15, \n                                    color=\"darkblue\", \n                                    hjust=0.5, \n                                    family=\"Times New Roman\"))\n\n\n\n\n NB : You can check which font its available in your computer with : windowsFonts() on windows, and with quartzFonts() on MacOS.\n\nTo add space between the title, the axes name, and the graphic use \\n\n\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n      labs(title=\"Average wind speed per decade \\n\",\n           x=\"\\n Date\", y=\"Average wind speed \\n\") +\n      geom_point(shape=1, size=3, color=\"red\", alpha=0.5) +\n      geom_line(linewidth=1, color=\"red\") + \n      theme(plot.title=element_text(face=\"bold\", \n                                    size=15, \n                                    color=\"darkblue\", \n                                    hjust=0.5, \n                                    family=\"Times New Roman\"))\n\n\n\n\n\n\ncoord_cartesian()\ncoord_cartesian() controls the extent of the graph axes. It allows you to explicitly define the limits of the x and y axes of the graph (useful for zooming in or out on a specific part of the graph, while keeping the original data!)\n\nggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n      labs(title=\"Average wind speed per decade \\n\",\n           x=\"\\n Date\", y=\"Average wind speed \\n\") +\n      geom_point(shape=1, size=3, color=\"red\", alpha=0.5) +\n      geom_line(linewidth=1, color=\"red\") + \n      theme(plot.title=element_text(face=\"bold\", \n                                    size=15, \n                                    color=\"darkblue\", \n                                    hjust=0.5, \n                                    family=\"Times New Roman\"))+\n      coord_cartesian(y=c(0,60))                              \n\n\n\n\nIn this example, coord_cartesian(y=c(0,60)) allows to restrict the y-axis to the range from 0 to 60.\n\n\nscale_color_manual()\nThe scale_color_manual() function is used to specify the colours associated with different values or levels of an aesthetic variable in a plot. With the name argument, you specify the title of the color legend. With the values arguments, you specify the colours associated with each value of the selected variable.\n\nplot_speed &lt;- ggplot(data=storms_decade) + \n                    labs(title=\"Wind speed statistics per decade \\n\",\n                         x=\"\\n Decade\", y=\"Wind Speed \\n\") +\n                    geom_point(aes(x=decade, y=mean_wind,color=\"Mean\")) + \n                    geom_line(aes(x=decade, y=mean_wind,color=\"Mean\"))+\n                    geom_point(aes(x=decade, y=min_wind,color=\"Min\")) + \n                    geom_line(aes(x=decade, y=min_wind,color=\"Min\"))+\n                    geom_point(aes(x=decade, y=max_wind,color=\"Max\")) + \n                    geom_line(aes(x=decade, y=max_wind,color=\"Max\")) + \n                    coord_cartesian(y=c(0,200))+  #personalize y-axis limits\n                    scale_color_manual(name=\"Statistic\",\n                                       values=c(\"Min\"=\"violet\",\n                                                \"Mean\"='#1B9E77',\n                                                \"Max\"='#D95F02'))+\n                    theme_minimal(base_size = 13) + \n                    theme(legend.position=\"top\",\n                          legend.title = element_text(size = 14),\n                          legend.text = element_text(size = 12),\n                          plot.title = element_text(size = 16, hjust = 0.5,face =\"bold\"),\n                          axis.title.x = element_text(size = 14, hjust = 0.5,face =\"bold\"),\n                          axis.title.y = element_text(size = 14, hjust = 0.5,face =\"bold\")\n                         )\nplot_speed                          \n\n\n\n\n  NB : scale_fill_manual() functions exactely the same.\ntheme(legend.X())  As for the title of the graphic, you can use theme.() function with legend.X, to put in bold, to change the size, the color, the position,… of the legend (its title, and its text).\n\n\n\nggarrange()\nWith the ggarrange() function you can organize your plots : their size, their marges, etc. For example, you can create graphics mosaics, which display several graphs side by side in a single figure.\nFirst, ensure ggpubr is installed : install.packages('ggpubr') \n\nlibrary(\"ggpubr\") #Load the library \n\nYou can personalize a theme for displaying the plots in the same way, by creating a function theme() with the options you want.\n\ntheme_custom &lt;- function(...) {\n            theme(plot.title = element_text(face = \"bold\", color=\"black\", hjust = 0.5), \n                  title = element_text(size=10))\n}\n\n With title you change the plot title and the x-axis and y-axis. With plot.title you change only the title of your plot.\nChoose your plots and store them as objects to use ggarrange()\n\nplot1 &lt;- ggplot(data=storms_decade, aes(x=decade, y=mean_wind)) +\n          labs(title = \"Average wind speed per decade\",\n               x=\"Decade\", y=\"Average wind speed\") +\n          geom_point(shape=15, size=3,color = \"red\", alpha = 0.5) +\n          geom_line(linewidth=1, color=\"red\")+\n          theme_custom()\n\nplot2 &lt;- ggplot(storms_decade, aes(x=decade, y=mean_wind)) + \n          labs(title=\"Average wind speed per decade\",\n               x=\"Decade\", y=\"Average wind speed\")  +\n          geom_bar(stat=\"identity\", fill = \"yellow\", width=5)+\n          theme_custom()\n\nplot3 &lt;- ggplot(storms, aes(x=wind))+\n          labs(title=\"Histogram of wind speed\",\n               x=\"Wind speed\") +\n              geom_histogram(color = \"darkgreen\", fill=\"lightgreen\", binwidth=10)+\n              theme_custom()\n\nplot4 &lt;- ggplot(storms, aes(y = wind)) +\n          labs(title=\"Boxplot of wind speed\",\n               x=\"\", y=\"Wind speed\") +\n          geom_boxplot(fill=\"lightblue\", color=\"blue\") +\n          theme_custom()+\n          theme(axis.text.x=element_blank(),\n                axis.ticks.x=element_blank())\n\nYou can create a mosaic with your plots.\n\nggarrange(plot1, plot2, plot3, plot4, nrow = 2, ncol = 2)\n\n\n\n\n\n\nggsave()\nTo save a graphic that you have created with ggplot2, you can use ggsave(). It saves the graph as an image file.\n\nggsave(filename='./img/wind_speed_stats.png', plot=plot1, height=10, width=15)\n\n\nThe image format (as PNG here, or JPEG, PDF, etc…) is defined in the filename argument.\nThe image dimension is based on the arguments height and width. Here, we saved an image of 15*10 inch."
  },
  {
    "objectID": "tools/Tuto2.html",
    "href": "tools/Tuto2.html",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "",
    "text": "dplyr offers a simple and consistent code syntaxe for data manipulation. We provide here short examples of the key dplyr verbs: select(), filter(), arrange(), mutate(), summarize() and group_by()."
  },
  {
    "objectID": "tools/Tuto2.html#ensure-tidyverse-is-installed",
    "href": "tools/Tuto2.html#ensure-tidyverse-is-installed",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Ensure tidyverse is installed",
    "text": "Ensure tidyverse is installed\nThe dplyr package is part of the tidyverse (Hadleyverse), and it follows a grammar-based approach to programming/data work.\nFirst, ensure tidyverse is installed : install.packages('tidyverse') \n\nlibrary(\"tidyverse\") #Load the library \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntidyverse_packages() #Display the packages\n\n [1] \"broom\"         \"conflicted\"    \"cli\"           \"dbplyr\"       \n [5] \"dplyr\"         \"dtplyr\"        \"forcats\"       \"ggplot2\"      \n [9] \"googledrive\"   \"googlesheets4\" \"haven\"         \"hms\"          \n[13] \"httr\"          \"jsonlite\"      \"lubridate\"     \"magrittr\"     \n[17] \"modelr\"        \"pillar\"        \"purrr\"         \"ragg\"         \n[21] \"readr\"         \"readxl\"        \"reprex\"        \"rlang\"        \n[25] \"rstudioapi\"    \"rvest\"         \"stringr\"       \"tibble\"       \n[29] \"tidyr\"         \"xml2\"          \"tidyverse\""
  },
  {
    "objectID": "tools/Tuto2.html#the-pipe-operator",
    "href": "tools/Tuto2.html#the-pipe-operator",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "The pipe operator",
    "text": "The pipe operator\n\nPipes & dplyr\nPipes are a simplifying programming tool that make your code easier to read. In dplyr, the expression for a pipe is %&gt;%.\n\n\nWhat is a pipe ?\nPipes take the output of a function as the input/argument of another function. R’s pipe specifically plugs the returned object to the left of the pipe into the first argument of the function on the right fo the pipe.\nExample: generate a random sample and obtain its mean\n\nrnorm(10) %&gt;%  #rnorm(n) generates a random sample of n observations from a normal distribution \n    mean()\n\n[1] 0.140672\n\n\nPipes avoid nested functions, prevent excessive writing to your disc, and increase the readability of our R scripts. By default, R pipes the output from the LHS of the pipe into the first argument of the function on the RHS of the pipe.  For example, a %&gt;% fun(3) is equivalent of fun(arg1=a, arg2 = 3)"
  },
  {
    "objectID": "tools/Tuto2.html#the-storms-database",
    "href": "tools/Tuto2.html#the-storms-database",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "The storms database",
    "text": "The storms database\nTo introduce dplyr verbs with pipes, we will use the storms database, which is the NOAA Atlantic hurricane database best track data. The data includes the positions and attributes of storms from 1975-2021. Storms from 1979 onward are measured every six hours during the lifetime of the storms.\nIf you want to learn more about storms :\n\n?storms\n\n NB : In the following sections, the head(n) and tail(n) functions are used for the presentation, to show only the first or last n or rows of the database.\n\nstorms %&gt;%\n    head(2)\n\n# A tibble: 2 × 13\n  name   year month   day  hour   lat  long status       category  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;           &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0  27.5   -79 tropical de…       NA    25     1013\n2 Amy    1975     6    27     6  28.5   -79 tropical de…       NA    25     1013\n# ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "tools/Tuto2.html#select-columns-with-select",
    "href": "tools/Tuto2.html#select-columns-with-select",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Select columns with select()",
    "text": "Select columns with select()\nIf you want to select specific columns of a dataframe, you can use select().\n\nSelection based on columns names\n\nUse commas to select multiple columns out of a data frame:\n\n\nstorms %&gt;% \n    select(name, year, month, day, hour, wind, pressure)%&gt;%\n    head(5)\n\n# A tibble: 5 × 7\n  name   year month   day  hour  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0    25     1013\n2 Amy    1975     6    27     6    25     1013\n3 Amy    1975     6    27    12    25     1013\n4 Amy    1975     6    27    18    25     1013\n5 Amy    1975     6    28     0    25     1012\n\n\n\nYou can use “first:last” for consecutive columns:\n\n\nstorms %&gt;% \n    select(name:hour, wind, pressure)%&gt;%\n    head(5)\n\n# A tibble: 5 × 7\n  name   year month   day  hour  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0    25     1013\n2 Amy    1975     6    27     6    25     1013\n3 Amy    1975     6    27    12    25     1013\n4 Amy    1975     6    27    18    25     1013\n5 Amy    1975     6    28     0    25     1012\n\n\n\nYou can deselect a column with -:\n\n\nstorms %&gt;% \n    select(name:hour, wind, pressure, -day)%&gt;%\n    head(5)\n\n# A tibble: 5 × 6\n  name   year month  hour  wind pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6     0    25     1013\n2 Amy    1975     6     6    25     1013\n3 Amy    1975     6    12    25     1013\n4 Amy    1975     6    18    25     1013\n5 Amy    1975     6     0    25     1012\n\n\n\n\nSelection based on string characters\nselect(contains(PATTERN)) allows to select columns in a dataframe which contain a specific “PATTERN”. It provides a nice shortcut in relevant cases:\n\nstorms %&gt;% \n    select(name, contains(\"diameter\"))%&gt;%\n    tail(5)\n\n# A tibble: 5 × 3\n  name  tropicalstorm_force_diameter hurricane_force_diameter\n  &lt;chr&gt;                        &lt;int&gt;                    &lt;int&gt;\n1 Wanda                           60                        0\n2 Wanda                           60                        0\n3 Wanda                           90                        0\n4 Wanda                           90                        0\n5 Wanda                           70                        0\n\n\nHere, we have selected the columns whose names contain the word “diameter”.\n\n\nRename variables\nYou can also rename some (or all) of your selected variables in place:\n\nstorms %&gt;%\n    select(alias=name, year, month, day, hour, wind_speed=wind, ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    head(5)\n\n# A tibble: 5 × 7\n  alias  year month   day  hour wind_speed ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;      &lt;int&gt;       &lt;int&gt;\n1 Amy    1975     6    27     0         25          NA\n2 Amy    1975     6    27     6         25          NA\n3 Amy    1975     6    27    12         25          NA\n4 Amy    1975     6    27    18         25          NA\n5 Amy    1975     6    28     0         25          NA\n\n\nIf you just want to rename columns without subsetting them, you can use rename:\n\nstorms %&gt;%\n    rename(alias=name, wind_speed=wind, ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    head(5)\n\n# A tibble: 5 × 13\n  alias  year month   day  hour   lat  long status  category wind_speed pressure\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;      &lt;int&gt;    &lt;int&gt;\n1 Amy    1975     6    27     0  27.5 -79   tropic…       NA         25     1013\n2 Amy    1975     6    27     6  28.5 -79   tropic…       NA         25     1013\n3 Amy    1975     6    27    12  29.5 -79   tropic…       NA         25     1013\n4 Amy    1975     6    27    18  30.5 -79   tropic…       NA         25     1013\n5 Amy    1975     6    28     0  31.5 -78.8 tropic…       NA         25     1012\n# ℹ 2 more variables: ts_diameter &lt;int&gt;, hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "tools/Tuto2.html#filter-observations-with-filter",
    "href": "tools/Tuto2.html#filter-observations-with-filter",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Filter observations with filter()",
    "text": "Filter observations with filter()\nTo keep observations, that validate a particular condition, you can use filter().\nWe can chain multiple filter commands with the pipe %&gt;% or just separate them within a single filter command using commas:\n\nstorms %&gt;% \n    select(name,year,month,day)%&gt;%\n    filter(year==2008,month &gt;= 6)%&gt;%\n    head(3)\n\n# A tibble: 3 × 4\n  name    year month   day\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 Arthur  2008     6     1\n2 Arthur  2008     6     1\n3 Arthur  2008     6     1\n\n\nHere, we have selected the columns “name”, “year”, “month” and “day” thanks to select(). With filter(), we keep row data with “year” equal to 2008 and “month” equal to or greater than six.\n\nUsing logical operators\nWe can use the & (“and”) and/or | (“or”) logical operators:\n\nstorms %&gt;% \n    select(name,year,month,day)%&gt;%\n    filter(year==2008 | month &gt;= 6)%&gt;%\n    head(3)\n\n# A tibble: 3 × 4\n  name   year month   day\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1 Amy    1975     6    27\n2 Amy    1975     6    27\n3 Amy    1975     6    27\n\n\n\n\nUsing regular expressions\nThe grepl() function allows to find the pattern in a character string.\n\nstorms %&gt;% \n    select(name:status)%&gt;%\n    filter(grepl(\"tropical\", status))%&gt;%\n    head(5)\n\n# A tibble: 5 × 8\n  name   year month   day  hour   lat  long status             \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;              \n1 Amy    1975     6    27     0  27.5 -79   tropical depression\n2 Amy    1975     6    27     6  28.5 -79   tropical depression\n3 Amy    1975     6    27    12  29.5 -79   tropical depression\n4 Amy    1975     6    27    18  30.5 -79   tropical depression\n5 Amy    1975     6    28     0  31.5 -78.8 tropical depression\n\n\nHere, we have kept the rows where the word “tropical” appears in the “status” column. \n\n\nMissing values\nA very common filter use case is identifying (or removing) missing data cases:\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(is.na(ts_diameter))%&gt;% \n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Amy    1975     6    27     0          NA\n2 Amy    1975     6    27     6          NA\n3 Amy    1975     6    27    12          NA\n\n\nHere, we have renamed the column “tropicalstorm_force_diameter” in “ts_diameter”. The use of the filter() function, with the is.na() function, allows to filter the rows where the “ts_diameter” columns is missing (=“NA”).\n\nTo remove missing observations, simply use negation: filter(!is.na(ts_diameter))\n\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(!is.na(ts_diameter))%&gt;% \n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Alex   2004     7    31    18           0\n2 Alex   2004     8     1     0           0\n3 Alex   2004     8     1     6           0"
  },
  {
    "objectID": "tools/Tuto2.html#sort-data-with-arrange",
    "href": "tools/Tuto2.html#sort-data-with-arrange",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Sort data with arrange()",
    "text": "Sort data with arrange()\nYou can arrange your data according to a colums, with the arrange() function.\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(!is.na(ts_diameter))%&gt;%\n    arrange(ts_diameter)%&gt;%\n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Alex   2004     7    31    18           0\n2 Alex   2004     8     1     0           0\n3 Alex   2004     8     1     6           0\n\n\nHere, the arrange() function is used to sort the rows according to the “ts_diameter” columns, by ascensing order.\n\nDescending order\nBy default, sorting will be organised by ascending order. We can also arrange items in descending order using arrange(desc()).\n\nstorms %&gt;% \n    select(name,year,month,day,hour,ts_diameter=tropicalstorm_force_diameter)%&gt;%\n    filter(!is.na(ts_diameter))%&gt;%\n    arrange(desc(ts_diameter))%&gt;%\n    head(3)\n\n# A tibble: 3 × 6\n  name   year month   day  hour ts_diameter\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;       &lt;int&gt;\n1 Oscar  2018    11     3    12        1440\n2 Oscar  2018    11     3     6        1230\n3 Oscar  2018    11     3    18        1140"
  },
  {
    "objectID": "tools/Tuto2.html#create-news-variable-with-mutate",
    "href": "tools/Tuto2.html#create-news-variable-with-mutate",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Create news variable with mutate()",
    "text": "Create news variable with mutate()\nYou can create new columns from scratch, or (more commonly) as transformations of existing columns.\n\nstorms %&gt;% \n    select(name, year, month, day) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0),\n           quarter = ifelse(month %in% c(12,1,2), \"Winter\",\n                        ifelse(month %in% 3:5, \"Spring\", \n                            ifelse(month %in% 6:8,\"Summer\",\"Automn\"))),\n            text = paste0(name, \" occured in the \", decade,\"'s\"))%&gt;%\n    head(4)\n\n# A tibble: 4 × 7\n  name   year month   day decade quarter text                     \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;                    \n1 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n2 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n3 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n4 Amy    1975     6    27 1970   Summer  Amy occured in the 1970's\n\n\nHere, we have created 3 columns :\n\n“decade” is composed of the first three digits of the column year (extracted with the substr() function) followed by a 0 (concatenated to the first 3 digits thanks to the paste0() function).\n“quarter” reprensents the quarter season based on the month value\n“text” contains the concatenation of the name of the storm, the expression “occurred in the” and the corresponding decade.\n\nmutate is order aware. So you can chain multiple mutates in a single call.\n\nmutate_if\nmutate_if() allows you to easily work on a subset of variables.\n\nstorms %&gt;% \n    select(name:status) %&gt;% \n    mutate(status=as.character(status))%&gt;%\n    mutate_if(is.character, toupper) %&gt;% \n    head(5)\n\n# A tibble: 5 × 8\n  name   year month   day  hour   lat  long status             \n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;              \n1 AMY    1975     6    27     0  27.5 -79   TROPICAL DEPRESSION\n2 AMY    1975     6    27     6  28.5 -79   TROPICAL DEPRESSION\n3 AMY    1975     6    27    12  29.5 -79   TROPICAL DEPRESSION\n4 AMY    1975     6    27    18  30.5 -79   TROPICAL DEPRESSION\n5 AMY    1975     6    28     0  31.5 -78.8 TROPICAL DEPRESSION\n\n\nThe toupper() function converts a character string in uppercase. So with the mutate_if(is.character) function, here, if the columns of the storms dataframe are character strings, the toupper() function will be apply.\n\n\nmutate_at & mutate_all\nmutate_at and mutate_all are also helpful. mutate_at allows to modify specified columns. The list argument enables to choose the suffix added to the name of the column that is “mutated”.\n\nstorms %&gt;% \n    select(name:status) %&gt;% \n    mutate_at(vars(name,status), list(UP =~ toupper(.))) %&gt;% \n    head(3)\n\n# A tibble: 3 × 10\n  name   year month   day  hour   lat  long status             name_UP status_UP\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;              &lt;chr&gt;   &lt;chr&gt;    \n1 Amy    1975     6    27     0  27.5   -79 tropical depressi… AMY     TROPICAL…\n2 Amy    1975     6    27     6  28.5   -79 tropical depressi… AMY     TROPICAL…\n3 Amy    1975     6    27    12  29.5   -79 tropical depressi… AMY     TROPICAL…\n\n\nHere, we have created the “name_UP” and “status_UP” columns, by converting the “name” and “status” column values in uppercase."
  },
  {
    "objectID": "tools/Tuto2.html#agregate-operations-with-summarize-and-group_by",
    "href": "tools/Tuto2.html#agregate-operations-with-summarize-and-group_by",
    "title": "Data wrangling with ‘dplyr’ in R",
    "section": "Agregate operations with summarize() and group_by()",
    "text": "Agregate operations with summarize() and group_by()\nsummarize() summarizes variables: you choose the variables and the summaries (e.g., mean() or min()). When using group_by(), summaries are done by groups:\n\nstorms %&gt;% \n    select(name, year, wind, pressure) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0))%&gt;%\n    group_by(decade) %&gt;%                                       # for each decade\n    summarize(Nobs = n(),                                      #number of observations\n              mean_wind = mean(wind, na.rm = TRUE),            #average wind speed\n              max_pressure = max(pressure, na.rm = TRUE))%&gt;%   #maximum pressure\n    head(4)\n\n# A tibble: 4 × 4\n  decade  Nobs mean_wind max_pressure\n  &lt;chr&gt;  &lt;int&gt;     &lt;dbl&gt;        &lt;int&gt;\n1 1970     932      50.9         1015\n2 1980    2674      51.0         1018\n3 1990    3895      51.4         1020\n4 2000    5000      49.9         1024\n\n\n\nNote that including “na.rm = TRUE” (or, its alias “na.rm = T”) is usually a good idea with summarize functions. Otherwise, any missing value will propogate to the summarized value too.\n\n\nstorms %&gt;% \n    summarize(mean_ts_diameter = mean(tropicalstorm_force_diameter))\n\n# A tibble: 1 × 1\n  mean_ts_diameter\n             &lt;dbl&gt;\n1               NA\n\n\n\nstorms %&gt;%\n    summarize(mean_ts_diameter = mean(tropicalstorm_force_diameter, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_ts_diameter\n             &lt;dbl&gt;\n1             146.\n\n\n\nsummarize_if, summarize_at and summarize_all\nThe same if-, at- and all-based workflow that we saw with mutate a few slides back also works with summarize.\n\nstorms %&gt;% \n    select(name, year, wind, pressure) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0))%&gt;%\n    group_by(decade) %&gt;% \n    summarize_if(is.numeric, mean, na.rm=T) %&gt;%\n    head(4)\n\n# A tibble: 4 × 4\n  decade  year  wind pressure\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1 1970   1977.  50.9     995.\n2 1980   1985.  51.0     994.\n3 1990   1995.  51.4     993.\n4 2000   2004.  49.9     993.\n\n\n\nstorms %&gt;% \n    select(year, wind, pressure) %&gt;%\n    mutate(decade = paste0(substr(year, start = 1, stop = 3),0))%&gt;%\n    select(-year)%&gt;%group_by(decade) %&gt;% \n    summarize_all(list(Mean=~mean(.,na.rm=TRUE), \n                       Min=~min(.,na.rm=TRUE),\n                       Max=~max(.,na.rm=TRUE)))\n\n# A tibble: 6 × 7\n  decade wind_Mean pressure_Mean wind_Min pressure_Min wind_Max pressure_Max\n  &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;    &lt;int&gt;        &lt;int&gt;    &lt;int&gt;        &lt;int&gt;\n1 1970        50.9          995.       15          924      150         1015\n2 1980        51.0          994.       10          888      165         1018\n3 1990        51.4          993.       10          905      155         1020\n4 2000        49.9          993.       10          882      160         1024\n5 2010        49.0          994.       15          908      160         1021\n6 2020        47.8          995.       15          917      135         1018"
  },
  {
    "objectID": "outreach.html",
    "href": "outreach.html",
    "title": "Outreach",
    "section": "",
    "text": "In French\n\n\nPodcast “A la rencontre des doctorants” de l’ENPC  Santé et Environnement : le coût caché de la pollution et de la chaleur en Inde\n\n\n\nFête de la Science 2024 - Journée Climat, Biodiversité et Systèmes Complexes\nOrganisé par l’Institut des Systèmes Complexes de Paris IdF (ISC-PIF) en partenariat avec le Centre international de recherche sur l’environnement et le développement (CIRED)\nLien vers le programme\nLe Climat illustré par l’Ecole Estienne\n\nIllustrations scientifiques par les étudiants de l’Ecole Estienne autour de présentations de recherche\n\nCi-dessous les projets en lien avec ma thèse “Effets de la pollution de l’eau et de la chaleur sur la santé en Inde”\n\n\nPollution fécale et mortalité infantile en Inde par Ninon Chauveau\n\nLe diorama se compose de 4 parties :\n\n\nUn nourrisson est au contact de l’eau du Gange.\n\n\nSous l’eau, on aperçoit les bactéries (coliformes fécaux) responsables de certaines maladies mortelles pour les enfants dont le système immunitaire ne s’est pas encore développé.\n\n\nLe nourrisson, de plus en plus contaminé, risque de mourir.\n\n\nLa cause : en 2020, moins de 30% des eaux usées urbaines sont traitées en Inde, il n’y a pas assez de stations d’épuration et les eaux usées des toilettes sont directement jetées dans le fleuve.\n\n\n    \n\n\n\nFonctionnement d’une station d’épuration par Hélène Trinh\n\nUne station d’épuration est un centre de traitement des eaux usées, dont le but est de purifier les eaux urbaines issues de nos habitations et de nos industries avant leur rejet dans le milieu naturel. Elle joue un rôle essentiel en maintenant la propreté de nos rivières et lacs, ainsi que notre santé en garantissant la sécurité de l’eau. Pour mieux comprendre les étapes de traitement, un livret est à disposition !\n  Your browser does not support the video tag. \n\n\n\nVecteur : moustique par Ema Dias\n\nCe dépliant accordéon vise à sensibiliser sur l’impact du réchauffement climatique sur la santé publique, notamment en Inde.\nLe support explique comment la hausse des températures favorise le développement des moustiques, entraînant ainsi une propagation accrue du paludisme, une infection parasitaire qui cause la désintégration des globules rouges et, par conséquent, de l’anémie ainsi que d’autres symptômes.\n      \n\n\n\nDystrophisation en eau calme par Aurélien Guillot\n\nLa dystrophisation est une accumulation excessive de nutriments anthropiques dans un milieu aquatique, provoquant une prolifération de la végétation et une diminution de la biodiversité.\nCe Leporello propose une synthèse visuelle de ce processus, sur un même étang, ainsi que de quelques solutions pour y remédier. La bande inférieure illustre la disparition progressive de la biodiversité, remplacée par des algues dévastatrices.\n \n\n\n\nCollection VVS par Kévin Forest\n\nCe projet vise à mettre en avant la notion, trop méconnue, de «valeur de la vie statistique» (VVS).\nIl se présente sous forme d’une collection de trois cartes interactives, chacune illustrant des protagonistes d’origines différentes, avec leur VVS respective. Une tirette permet de visualiser cette valeur en unité de Big Mac (index pour comparer le pouvoir d’achat entre les pays proposé par le journal The Economist). Lors de l’ouverture de chaque carte, un pop-up représentant un objet de valeur équivalente apparaît, permettant ainsi de visualiser concrètement les écarts entre les pays. Le tout est accompagné d’une notice, détaillant de manière plus précise les concepts de VVS et d’unité Big Mac."
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Teaching Assistant at SciencesPo Paris|PSIA\n\nNatural Resources Economics (M1, 16h in English), Pr. L.-G. Giraudet  Fall 2020, 2021, 2022\n\n\nPart-time ATER (teaching fellow) at EMS University Paris I Panthéon-Sorbonne\n\nStatistics (L2, 36h in French), Pr. R. Zafri – Spring 2024\nMacroeconomics (L3, 24h in French), Pr. M. Leduc – Spring 2024\nEconomics of Uncertainty and Information (L3, 36h in French), Pr. F. Pratlong – Fall 2023\n\n\nTeaching Assistant at University Paris I Panthéon-Sorbonne\n\nIntroduction to Econometrics (L3, 30h in French), Pr. C. Doz and T. Broer – Spring 2022\nStatistics : Probabilities (L2, 24h in French), Pr. D. Brochard and E. Defebvre – Fall 2021"
  },
  {
    "objectID": "CV.html",
    "href": "CV.html",
    "title": "CV",
    "section": "",
    "text": "Full CV\n\nCurrent position\n\n2024 – : CIRAD researcher, CIRED\n\n\nEducation\n\n2020 – 2024: Ph.D. in Economics, Paris School of Economics, ENPC, CIRED\nSpring 2023: Visiting in the Economics department of the University of Oregon\n2019 – 2020: Master 2 Analysis and Policy in Economics, Paris School of Economics\n2016 – 2020: Engineering degree, Ecole Nationale des Ponts et Chaussées (ENPC)\n2014 – 2016: Two years of intensive preparatory courses in Mathematics and Physics (MPSI-MP*), Lycee Blaise Pascal (Orsay)\n\n\nRelevant Experience\n\n2018 – 2020: Research Assistant, CIRED  Work with Franck Lecocq, CLA of Chapter 4 of the IPCC AR6 (WG III)\nSpring 2019: Research Assistant, Energy Research Centre (Cape Town, South Africa)  Work with Harald Winkler, CLA of Chapter 4 of the IPCC AR6 (WG III)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Claire Lepault",
    "section": "",
    "text": "Welcome! I am a CIRAD researcher based at CIRED.\nMy research lies at the intersection of environmental, development and health economics. I have a particular interest in exploring how environmental issues, such as pollution and climate change, affect human health through their impacts on natural resources.\nI completed my PhD at the Paris School of Economics and CIRED in September 2024.\nContact : claire.lepault [at] cirad.fr\nPlease feel free to get in touch!"
  },
  {
    "objectID": "tools/Tuto5.html",
    "href": "tools/Tuto5.html",
    "title": "Geospatial analysis with ‘sf’ in R",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "tools/Tuto4.html",
    "href": "tools/Tuto4.html",
    "title": "Applied econometrics with ‘fixest’ in R",
    "section": "",
    "text": "Coming soon!"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Working papers\nIs urban wastewater treatment effective in India? Evidence from water quality and infant mortality  R&R Economic Journal (link to the latest version)\n\n\nAbstract\n\nIn developing countries, untreated sewage exposes people to alarming water pollution levels, yet there is limited knowledge about the effectiveness of wastewater treatment investments. I evaluate the impact of wastewater treatment on water quality and infant mortality in India, exploiting the staggered introduction of urban sewage treatment plants over the period 2010-2020. I match granular data on sewage treatment plants, river water quality, as well as child births and deaths using the hydrological network. I show that after initiating wastewater treatment, levels of fecal coliforms – a commonly used measure of fecal contamination in water – decreased by 53% (95% CI: [7; 99]). Mortality under the age of six months – a critical period for digestive system development – declined by 20% (95% CI: [3; 36]) downstream of the plants, with larger effects observed for boys and children from the lowest wealth quintiles. The results are consistent across several estimators robust to heterogeneous treatment effects, are not driven by selective migration, and are found only downstream of the plants, which rules out confounding effects from other local policies. Wastewater treatment is cost-effective according to GDP-based thresholds, with a cost of INR 6 million per life saved and INR 85,000 per DALY averted for children under six months. \nENPC blog post\n\nA hidden health impact of heat: exacerbated anemia in India with Philippe Quirion and Pierre Uginet Submitted\n\n\nAbstract\n\nGlobal warming has increasingly negative health effects, particularly in relatively poor and hot countries such as India. These impacts are partly due to the direct effect of high temperatures on the human body, and partly due to vector-borne diseases and reduced food availability. While numerous harmful health effects of high temperatures have been established, there is little research into their possible impact on anemia, a medical condition affecting 25% of the global population and 43% of people in India. Using health, nutrition and climate data, we analyze the relationship between heat exposure and anemia in India over the past decade. We match blood hemoglobin measurements from nearly 259,000 children, 901,000 women and 138,000 men to two different measurements of exposure to heat, based on air temperature and wet-bulb temperature respectively. We find that heat exposure in the 30 days preceding blood measurement worsens anemia in these three population groups. Moreover, the mechanisms responsible do not seem to be related to reduced food availability, while malaria could explain part of the relationship between temperature and anemia. Finally, we estimate the number of extra cases induced by a +2°C increase in annual air temperature, which has an associated cost of around 7.6 bn US dollars, i.e., 0.2% of Indian GDP.\n\n\n\nWork in progress\nFertilizers, water quality and perinatal health in India with Eléonore Rouault \n\n\nPublication\nMapping forward-looking mitigation studies at country level, Claire Lepault and Franck Lecocq, Environmental Research Letters, Volume 16.8, July 2021  link to open access article | code \n\n\nOther contributions\n\nContributing Author of Chapter 4: Mitigation and development pathways in the near- to mid-term of the \\(6^{th}\\) IPCC Assessment Report (AR6, WG III)\nParticipation in the creation of the AR6 Scenarios Database"
  }
]